Некоторые выдержки из теории по Hibernate

Наблюдение за классами и таблицами
Мы видим, что наблюдается некоторое соответствие
между классами и таблицами например:

Java классы             Реляционные БД
Название класса         Название таблицы
Объект класса           Строка таблицы
Список объектов List    Таблица
Поле в классе           Столбец в таблице


Для того, чтобы объекты передавать в таблицу
было придумано:
Object Relational Mapping - ORM Hibernate
отображение объектов в таблице - и наоборот,
где ORM автоматически может выполнять все действия
JDBC и SQL

Помимо обычных CRUD действий мы можем также
выстаивать связи между сущностями,
связи один-к-одному, один-ко-многим и т.д.

При этом мы практически не выходим из Java
применяя обычные java-команды

Порядок примерно такой -
мы создаем сессию, в ней начинаем транзакцию,
в транзакции выполняем нужные операции,
завершаем транзакцию, завершаем сессию

---

Сессия - обязательный
объект для взаимодействия с Hibernate.
Любые действия с Hibernate проходят через сессию.
Объект сессии получаем из объекта SessionFactory -
фабрика сессий

---

Транзакция - единица работы с БД.
Нужны для поддержания согласованности данных в таблице.
Транзакции могут блокировать доступ к БД, на запись,
на чтение и т.д.

Транзакции можно применять - Commit,
и откатывать - Rollback
В транзакции могут участвововать несколько операций
с БД.

Самый распространенный пример транзакции -
банковские операции. Мы снимаем деньги с одного счета
и переносим на другой с рядом проверок - все эти операнции
с БД будут одной транзакцией, или все проходят или
все откатываются в итоге в исходное состояние.

Также добавлю, что Hibernate это более высокий
уровень абстракции (стоит над JdbcTemplate)
и если не стоит очень сложных задач, позволяет
более удобно и быстро реализовывать проекты
(сравните объем DAO на JDBC и Hibernate )